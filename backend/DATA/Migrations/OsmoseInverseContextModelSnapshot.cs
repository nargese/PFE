// <auto-generated />
using System;
using DATA.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DATA.Migrations
{
    [DbContext(typeof(OsmoseInverseContext))]
    partial class OsmoseInverseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Atelier", b =>
                {
                    b.Property<Guid>("IdAtelier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Filiale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Labelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomAtelier")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("IdAtelier");

                    b.HasIndex("FK_Filiale");

                    b.ToTable("Atelier");
                });

            modelBuilder.Entity("Domain.Models.Filiale", b =>
                {
                    b.Property<Guid>("IdFiliale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Labelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFiliale");

                    b.ToTable("Filiale");
                });

            modelBuilder.Entity("Domain.Models.Station", b =>
                {
                    b.Property<Guid>("IdStation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacite")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FK_Atelier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("TypeStation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStation");

                    b.HasIndex("FK_Atelier");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("OsmoseProject.Models.CategorieProduitChimique", b =>
                {
                    b.Property<Guid>("IdCategorie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomCategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("IdCategorie");

                    b.ToTable("CategorieProduitChimique");
                });

            modelBuilder.Entity("OsmoseProject.Models.Compte", b =>
                {
                    b.Property<Guid>("IdCompte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FK_Filiale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Role")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Motdepasse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("access")
                        .HasColumnType("bit");

                    b.HasKey("IdCompte");

                    b.HasIndex("FK_Filiale");

                    b.HasIndex("FK_Role");

                    b.ToTable("Compte");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Compte");
                });

            modelBuilder.Entity("OsmoseProject.Models.Fournisseur", b =>
                {
                    b.Property<Guid>("IdFournisseur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FournisseurCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FournisseurEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FournisseurFaxNumber")
                        .HasColumnType("int");

                    b.Property<string>("FournisseurNom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FournisseurPhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProviderAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFournisseur");

                    b.ToTable("Fournisseur");
                });

            modelBuilder.Entity("OsmoseProject.Models.ProduitChimique", b =>
                {
                    b.Property<Guid>("IdProduitChimique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_CategorieProduitChimique")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProduitChimiqueLabel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProduitChimique");

                    b.HasIndex("FK_CategorieProduitChimique");

                    b.ToTable("ProduitChimique");
                });

            modelBuilder.Entity("OsmoseProject.Models.Role", b =>
                {
                    b.Property<Guid>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRole");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("OsmoseProject.Models.SourceDeau", b =>
                {
                    b.Property<Guid>("IdSourceDeau")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FK_Filiale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("QuantiteDeau")
                        .HasColumnType("float");

                    b.HasKey("IdSourceDeau");

                    b.HasIndex("FK_Filiale");

                    b.ToTable("SourceDeau");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SourceDeau");
                });

            modelBuilder.Entity("OsmoseProject.Models.TypeCartouche", b =>
                {
                    b.Property<Guid>("IdTypeCartouche")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomCartouche")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("IdTypeCartouche");

                    b.ToTable("TypeCartouche");
                });

            modelBuilder.Entity("OsmoseProject.Models.TypeMembrane", b =>
                {
                    b.Property<Guid>("IdTypeMembrane")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomMembrane")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeMembraneLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TypeMembraneSize")
                        .HasColumnType("float");

                    b.HasKey("IdTypeMembrane");

                    b.ToTable("TypeMembrane");
                });

            modelBuilder.Entity("OsmoseProject.Models.Login", b =>
                {
                    b.HasBaseType("OsmoseProject.Models.Compte");

                    b.HasDiscriminator().HasValue("Login");
                });

            modelBuilder.Entity("OsmoseProject.Models.Bassin", b =>
                {
                    b.HasBaseType("OsmoseProject.Models.SourceDeau");

                    b.Property<string>("NomBassin")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasDiscriminator().HasValue("Bassin");
                });

            modelBuilder.Entity("OsmoseProject.Models.Puit", b =>
                {
                    b.HasBaseType("OsmoseProject.Models.SourceDeau");

                    b.Property<string>("AmortissementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomPuit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Profondeur")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Puit");
                });

            modelBuilder.Entity("Domain.Models.Atelier", b =>
                {
                    b.HasOne("Domain.Models.Filiale", "Filiale")
                        .WithMany("Ateliers")
                        .HasForeignKey("FK_Filiale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Station", b =>
                {
                    b.HasOne("Domain.Models.Atelier", "Atelier")
                        .WithMany("Stations")
                        .HasForeignKey("FK_Atelier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OsmoseProject.Models.Compte", b =>
                {
                    b.HasOne("Domain.Models.Filiale", "Filiale")
                        .WithMany("Comptes")
                        .HasForeignKey("FK_Filiale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OsmoseProject.Models.Role", "Role")
                        .WithMany("Comptes")
                        .HasForeignKey("FK_Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OsmoseProject.Models.ProduitChimique", b =>
                {
                    b.HasOne("OsmoseProject.Models.CategorieProduitChimique", "CategorieproduitChimique")
                        .WithMany("produitsChimique")
                        .HasForeignKey("FK_CategorieProduitChimique")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OsmoseProject.Models.SourceDeau", b =>
                {
                    b.HasOne("Domain.Models.Filiale", "Filiale")
                        .WithMany()
                        .HasForeignKey("FK_Filiale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
